# -*- coding: utf-8 -*-
"""Network Packet sniffer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S19JKls_-iKx8tlfBWE-CJnKm1_bHq5O
"""

from re import T
import socket
import struct
import textwrap


TAB_1 = '\t - '
TAB_2 = '\t\t - '
TAB_3 = '\t\t\t - '
TAB_4 = '\t\t\t\t - '


Data_TAB_1 = '\t - '
Data_TAB_2 = '\t\t - '
Data_TAB_3 = '\t\t\t - '
Data_TAB_4 = '\t\t\t\t - '


def main():
  conn = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(3))
  while True:
    raw_data, addr = conn.recvfrom(65535)
    dest_mac, src_mac, eth_proto, data = ethernet_frame(raw_data)
    print('\n Ethernet Frame')
    print(TAB_1 + 'Destination: {}, Source: {}, Protocol: {}'.format(dest_mac, src_mac, eth_proto))
    print('Data:')

    # 8 for IPv4
    if eth_proto == 8:
      (version, header_length, ttl, proto, src, target, data) = ipv4_packet(data)
      print(TAB_1 + 'IPV4 Packet:')
      print(TAB_2 + 'Version: {}, Header_Length: {}, TTL: {}'.format(version, header_length, ttl))
      print(TAB_2 + 'Data:')


    #ICMP
      if proto == 1:
        icmp_type, code, checksum, data = icmp_packet(data)
        print(TAB_1 + 'ICMP Packet:')
        print(TAB_2 + 'Type: {}, Code: {}, Checksum: {}'.format(icmp_type, code, checksum))

    #TCP
    elif proto == 6:
        (src_port, dest_port, sequence, acknowledgement, flag_urg, flag_ack, flag_psh, flag_rst, data) = tcp_packet(data)

#unpack Ethernet
def ethernet_frame(data):
  dest_mac, src_mac, proto = struct.unpack('! 6s 6s H' , data[:14])
  return get_mac_addr(dest_mac), get_mac_addr(src_mac), socket.htons(proto), data[14:]

#Return properly formatted MAC address
def get_mac_addr(bytes_addr):
  bytes_str = map('{:02x}'.format, bytes_addr)
  get_mac_addr = map('{:02X}'.format , bytes_addr)
  return ':'.join(bytes_str).upper()

#unpack IPv4 packet

def ipv4_packet(data):
  version_header_length = data[0]
  version = version_header_length >> 4
  header_length = (version_header_length & 15) * 4
  ttl, proto, src, target = struct.unpack('! 8x B B 2x 4s 4s', data[:20])
  return version, header_length, ttl, proto, ipv4(src), ipv4(target), data[header_length:]


#Return properly formatted IPv4 address
def ipv4(addr):
  return '.'.join(map(str, addr))

#unpack ICMP packet

def icmp_packet(data):
  icmp_type, code, checksum = struct.unpack('! B B H', data[:4])
  return icmp_type, code, checksum, data[4:]

#unpack TCP packet

def tcp_packet(data):
  (src_port, dest_port, sequence, acknowledgement, offset_reserved_flags) = struct.unpack('! H H L L H', data[:14])
  offset = (offset_reserved_flags >> 12) * 4
  flag_org = (offset_reserved_flags & 32) >> 5
  flag_urg = (offset_reserved_flags & 16) >> 4
  flag_urg = (offset_reserved_flags & 8) >> 3
  flag_urg = (offset_reserved_flags & 4) >> 2
  flag_urg = (offset_reserved_flags & 2) >> 1
  flag_urg = offset_reserved_flags & 1
  return src_port, dest_port, sequence, acknowledgement, flag_org, flag_urg, data[offset:offset]

#unpack UDP Sagment
def udp_sagment(data):
  src_port, dest_port, size = struct.unpack('! H H 2x H', data[:8])
  return src_port, dest_port, size, data[8:]

#format multi line data
def format_multi_line(prefix, string, size=80):
  size -= len(prefix)
  if isinstance(string, bytes):
    string = ''.join(r'\x{:02x}'.format(byte) for byte in string)
    if size % 2:
      size -= 1
  return '\n'.join([prefix + line for line in textwrap.wrap(string, size)])

main()





